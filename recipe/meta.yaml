{% set version = "1.3.0" %}
{% set build_number= "0" %}

package:
  name: tensorflow
  version: {{ version }}

source:
  fn: tensorflow-{{ version }}.tar.gz
  url: https://github.com/tensorflow/tensorflow/archive/v{{ version }}.tar.gz
  sha256: e1af1bb767b57c3416de0d43a5f74d174c42b85231dffd36f3630173534d4307
  patches:
    # Makes configure more generic by not requiring locate (this could be interested for a PR upstream)
    - do-not-use-locate.patch                 # [linux]
    # Allow to compile against jemalloc on oldie glibc (still better to use LD_PRELOAD to use a newer version)
    # Another reason why we might want to disable this: https://github.com/jemalloc/jemalloc/issues/937
    - jemalloc-compiles-with-old-glibc.patch  # [linux]
    # Allow to compile with old glibc lacking some symbols.
    # Too broad, should add only to affected submodules like sampler
    - add-lrt-to-CROSSTOOL_nvcc.tpl.patch     # [linux]
    # This will make it into the next TF release, remove then
    - fix-xla-broadcast.patch                 # [linux]
    # Allows to compile against conda MKL, if we decide to add it to the build dependencies
    - fix-mkl-dso-location-for-conda.patch    # [linux]

build:
  number: {{ build_number }}
  skip: True  # [not linux]  # or not py27
  string: gpu_cuda8_cudnn6_mkl_xla_{{ build_number }}

requirements:
  # See: https://pypi.python.org/pypi/tensorflow
  # I'm not sure we really need all these libraries
  build:
    - python

    # --- conda build requirements

    - bazel >=0.4.5
    - pip
    - swig
    - unzip
    - zip
    - zlib
    - curl  # to download MKL-DNN (should move to compile against conda's)

    # --- tensorflow requirements

    - wheel >=0.26
    - six >=1.10.0
    - protobuf >=3.2.0
    - numpy >=1.11.*
    - backports.weakref ==1.0rc1

    # MKL Notes.
    # Looking at configure, TF can compile interchangeably against MKL-ML (aka MKL-DNN),
    # and "Full" MKL. It looks first for MKL-DNN.
    #
    # We can let configure download MKLML from intel's github project,
    # or use the package from the intel channel. The problem with the latter is that
    # it pulls the "intel" feature, which in turn screws essentially everything with conda-forge...
    # - mkl-dnn
    #
    # So for the time being we could opt for full MKL, which (will be) on defaults and does not pull the intel feat
    # - mkl-devel  # Installs mkl and mkl-include
    #
    # Ultimatelly, we can just instruct tensorflow to download and install mkl-dnn
    # We do so, but then we need to make sure we have a proper package at runtime.

    - pip

  run:
    - python
    - six >=1.10.0
    - protobuf >=3.2.0
    - numpy  >=1.11.0
    - backports.weakref ==1.0rc1
    - mkl  # we build against MKL-DNN atm, but they are interchangeable


test:

  # Copy here anything we would need for the tests at run_test.sh
  # source_files:
  #  - python/caffe/test

  requires:
    - mock >=2.0.0  # [py2k]

  imports:
    - tensorflow

about:
  home: http://tensorflow.org/
  license: Apache 2.0
  license_family: Apache
  summary: TensorFlow is a machine learning library
  description: |
    GPU enabled build of TF with support for XLA, MKL and modern instruction sets.
  dev_url: https://github.com/tensorflow/tensorflow
  doc_url: https://www.tensorflow.org/get_started/get_started
  doc_source_url: https://github.com/tensorflow/tensorflow/tree/master/tensorflow/docs_src

extra:
  original-recipe-maintainers:
    - jjhelmus
    - danielfrg
    - waitingkuo
    - ghego
  recipe-maintainers:
    - sdvillal
